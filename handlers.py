from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from re import fullmatch

from speech_to_text import transcribe

router = Router()

class Pronounce(StatesGroup):
    waiting_for_voice = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∫–æ—Ä–µ–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –Ω–∞–ø–∏—à–∏ /check {—Å–ª–æ–≤–æ}")


@router.message(Command("about"))
async def cmd_start(message: Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –ï–≥–æ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"
                         " —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram.\n –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n‚Äî Python + aiogram"
                         "\n‚Äî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–µ–π STT"
                         "\n‚Äî –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å–ª–æ–≤")


@router.message(Command("help"))
async def cmd_start(message: Message):
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É <code>/check {—Å–ª–æ–≤–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º}</code>\n\n"
                         "–°–æ–≤–µ—Ç—ã:\n‚Äî –ì–æ–≤–æ—Ä–∏ —á—ë—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.\n‚Äî –õ—É—á—à–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ."
                         "\n‚Äî –û—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞ –Ω–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª—ã.\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
                         "\n‚Äî –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.")


@router.message(Command("check"))
async def cmd_check(message: Message, state: FSMContext):
    args = message.text.strip().split(maxsplit=1)

    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ —Å–ª–æ–≤–æ. –ü—Ä–∏–º–µ—Ä: /check ÏïàÎÖï")
        return

    word = args[1].strip()

    if not fullmatch(r"[Í∞Ä-Ìû£]+", word):
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º")
        return

    await state.update_data(expected_word=word)
    await state.set_state(Pronounce.waiting_for_voice)

    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞: {word}\n–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§")


@router.message(Pronounce.waiting_for_voice, F.voice)
async def handle_voice(message: Message, state: FSMContext):
    data = await state.get_data()
    expected_word = data.get("expected_word")

    voice = message.voice
    file = await message.bot.get_file(voice.file_id)
    file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file.file_path}"

    recognized_text = await transcribe(file_url)

    if recognized_text.lower().strip() == expected_word.lower().strip():
        await message.answer("–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
    else:
        await message.answer(f"–ù–µ —Å–æ–≤–ø–∞–ª–æ. –¢—ã —Å–∫–∞–∑–∞–ª: {recognized_text}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_word}")

    await state.clear()


@router.message(Pronounce.waiting_for_voice)
async def handle_other(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –¥–æ 30 —Å–µ–∫")
